package src.basic;

@FunctionalInterface
interface myFunctionalInteface{
    void thisMethod();
    //void thisMethod2();
}
class Phone {
    public void showTime() {
        System.out.println("time is 8 AM");
    }
}
class NewPhone extends Phone{
    @Override
    public void showTime() {
        System.out.println("time is 8 PM");
    }
    @Deprecated
    public int sum(int a, int b){
        return a+b;
    }
}
public class Annotations {
    @SuppressWarnings("decreption")
    public static void main(String[] args) {
        NewPhone phone = new NewPhone();
        phone.showTime();
        phone.sum(3,4);

    }
}
/*
Annotations
    -> Annotations provides metadata to class/methods.
    -> Annotations start with '@'.
    -> Annotations are helpful for detecting erros.
       Example : @override annotations will make sure that there are no typos while overriding a method.
Important Annotations In Java :
 -> @Override:
    -> This annotation makes sure that the sub class method is successfully overiding the parent class method.
    -> While overriding a class, there is a chance of typing errors or spelling mistakes. In such
       cases, the method will not get overridden and you will get an error.
    -> Override exception helps us to encounter such situtations by extracting a warning from the compiler.

 -> @Deprecated :
    -> This annotation is used to mark a deprecated method.
    -> If developer uses the deprecated method then the compiler generated a warning.
    -> There high chance of removal of deprecated methods in future versions therefore it is better to not use them.

 -> @SupressWarnings :
    -> This annotation helps us to supress some warnings that are being generated by compiler

 -> @FunctionInterface :
    -> An interface which contains only one abstract method is known as functional interface.
    -> @FunctionInterface annotation helps us to make sure that a functional interface is not
       having more than one abstract method.

*/